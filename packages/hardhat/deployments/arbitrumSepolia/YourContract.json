{
  "address": "0x6A47346e722937B60Df7a1149168c0E76DD6520f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createInvoice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invoices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "payInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x132eb0fc9e9197f7ae7e8ee0048e52d4a88cf164eff51cbc5a34105bf6075254",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x6A47346e722937B60Df7a1149168c0E76DD6520f",
    "transactionIndex": 2,
    "gasUsed": "1607481",
    "logsBloom": "0x
    "blockHash": "0xd82d18dc4c4969f7f178f8f0f56621b43d71412ad8401dcbd90c97f153da6f15",
    "transactionHash": "0x132eb0fc9e9197f7ae7e8ee0048e52d4a88cf164eff51cbc5a34105bf6075254",
    "logs": [],
    "blockNumber": 15264752,
    "cumulativeGasUsed": "5177227",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f6ec6cf2b79245e1cf7b60e3056227d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvoiceCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createInvoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invoices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"payInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\t\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Utile per il debug. Rimuovere prima del rilascio su una rete live.\\n//import \\\"hardhat/console.sol\\\";\\n// Interfaccia per il token ERC20\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract YourContract {\\n    // Definizione della struttura dati per le informazioni relative a una fattura\\n    struct InvoiceData {\\n        uint256 id; // Identificativo della fattura\\n        address seller; // Indirizzo del venditore\\n        address buyer; // Indirizzo dell'acquirente\\n        uint amount; // Importo della fattura\\n        bool paid; // Flag che indica se la fattura \\u00e8 stata pagata\\n    }\\n\\n    // Mappatura degli ID delle fatture alle relative informazioni\\n    mapping(uint256 => InvoiceData) public invoices;\\n\\n    uint256 public id;\\n\\n    address public usdcToken;\\n    \\n    // Evento emesso quando viene creata una nuova fattura\\n    event InvoiceCreated(address indexed seller, address indexed buyer, uint amount);\\n\\n\\n    constructor() {\\n        usdcToken = 0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d;\\n    }\\n\\n\\n    // Funzione per creare una nuova fattura\\n    function createInvoice(address seller, address buyer, uint amount) public returns (uint256){\\n\\n        require(seller != address(0));\\n        require(buyer != address(0));\\n        require(amount != 0);\\n\\n        id += 1;\\n        // Creazione di una nuova fattura\\n        InvoiceData memory newInvoice = InvoiceData({\\n            id: id, // Identificativo della fattura\\n            seller: seller, // Indirizzo del venditore\\n            buyer: buyer, // Indirizzo dell'acquirente\\n            amount: amount, // Importo della fattura\\n            paid: false // Flag che indica se la fattura \\u00e8 stata pagata\\n        });\\n\\n        // Salva la fattura nel mapping\\n        invoices[newInvoice.id] = newInvoice;\\n\\n        // Emisione dell'evento InvoiceCreated\\n        emit InvoiceCreated(seller, buyer, amount);\\n\\n        return newInvoice.id;\\n    }\\n\\n    // Funzione per pagare una fattura\\n    function payInvoice(uint256 invoiceId) public {\\n        // Recupera la fattura dal mapping\\n        InvoiceData storage invoice = invoices[invoiceId];\\n\\n        // Verifica che la fattura non sia gi\\u00e0 stata pagata\\n        require(!invoice.paid, \\\"The invoice has already been paid\\\");\\n\\n        // Trasferisce l'importo della fattura dal pagatore al venditore\\n        IERC20(usdcToken).transferFrom(invoice.buyer, invoice.seller, invoice.amount);\\n\\n        // Imposta il flag di pagamento della fattura su true\\n        invoice.paid = true;\\n    }\\n}\\n\",\"keccak256\":\"0xabdfa8ee40fdf221979b743f3167157aa2f5bdd891a010ae8c7d20130d40e2a5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b0319167375faf114eafb1bdbe2f0316df893fd58ce46aa4d179055610472806100466000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311eac8551461005c5780632455048a1461008c5780634e6d1405146100ad578063ac60a6cd1461012f578063af640d0f14610144575b600080fd5b60025461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61009a366004610397565b61014d565b604051908152602001610083565b6100f96100bb3660046103d3565b6000602081905290815260409020805460018201546002830154600384015460049094015492936001600160a01b0392831693929091169160ff1685565b604080519586526001600160a01b039485166020870152929093169184019190915260608301521515608082015260a001610083565b61014261013d3660046103d3565b61026d565b005b61009f60015481565b60006001600160a01b03841661016257600080fd5b6001600160a01b03831661017557600080fd5b8160000361018257600080fd5b600180600082825461019491906103ec565b90915550506040805160a081018252600180548083526001600160a01b0388811660208086018281528a8416878901818152606089018c8152600060808b018181529881528086528b90208a518155935198840180549988166001600160a01b03199a8b161790559051600284018054919097169816979097179094559451600386015592516004909401805494151560ff199095169490941790935593518681529293927fb895d4cc35c4181f8280cebd87134b22189052ef0530b1dbbf6db80fc066091c910160405180910390a351949350505050565b6000818152602081905260409020600481015460ff16156102de5760405162461bcd60e51b815260206004820152602160248201527f54686520696e766f6963652068617320616c7265616479206265656e207061696044820152601960fa1b606482015260840160405180910390fd5b6002805490820154600183015460038401546040516323b872dd60e01b81526001600160a01b039384166004820152918316602483015260448201529116906323b872dd906064016020604051808303816000875af1158015610345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103699190610413565b50600401805460ff1916600117905550565b80356001600160a01b038116811461039257600080fd5b919050565b6000806000606084860312156103ac57600080fd5b6103b58461037b565b92506103c36020850161037b565b9150604084013590509250925092565b6000602082840312156103e557600080fd5b5035919050565b8082018082111561040d57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561042557600080fd5b8151801515811461043557600080fd5b939250505056fea264697066735822122003805cc2a6a6de2b010208ee43e9e1f9d81d07ffaa81b4b45d6d0d1e391a2a5f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806311eac8551461005c5780632455048a1461008c5780634e6d1405146100ad578063ac60a6cd1461012f578063af640d0f14610144575b600080fd5b60025461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61009a366004610397565b61014d565b604051908152602001610083565b6100f96100bb3660046103d3565b6000602081905290815260409020805460018201546002830154600384015460049094015492936001600160a01b0392831693929091169160ff1685565b604080519586526001600160a01b039485166020870152929093169184019190915260608301521515608082015260a001610083565b61014261013d3660046103d3565b61026d565b005b61009f60015481565b60006001600160a01b03841661016257600080fd5b6001600160a01b03831661017557600080fd5b8160000361018257600080fd5b600180600082825461019491906103ec565b90915550506040805160a081018252600180548083526001600160a01b0388811660208086018281528a8416878901818152606089018c8152600060808b018181529881528086528b90208a518155935198840180549988166001600160a01b03199a8b161790559051600284018054919097169816979097179094559451600386015592516004909401805494151560ff199095169490941790935593518681529293927fb895d4cc35c4181f8280cebd87134b22189052ef0530b1dbbf6db80fc066091c910160405180910390a351949350505050565b6000818152602081905260409020600481015460ff16156102de5760405162461bcd60e51b815260206004820152602160248201527f54686520696e766f6963652068617320616c7265616479206265656e207061696044820152601960fa1b606482015260840160405180910390fd5b6002805490820154600183015460038401546040516323b872dd60e01b81526001600160a01b039384166004820152918316602483015260448201529116906323b872dd906064016020604051808303816000875af1158015610345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103699190610413565b50600401805460ff1916600117905550565b80356001600160a01b038116811461039257600080fd5b919050565b6000806000606084860312156103ac57600080fd5b6103b58461037b565b92506103c36020850161037b565b9150604084013590509250925092565b6000602082840312156103e557600080fd5b5035919050565b8082018082111561040d57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561042557600080fd5b8151801515811461043557600080fd5b939250505056fea264697066735822122003805cc2a6a6de2b010208ee43e9e1f9d81d07ffaa81b4b45d6d0d1e391a2a5f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 96,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "invoices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(InvoiceData)91_storage)"
      },
      {
        "astId": 98,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 100,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "usdcToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(InvoiceData)91_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourContract.InvoiceData)",
        "numberOfBytes": "32",
        "value": "t_struct(InvoiceData)91_storage"
      },
      "t_struct(InvoiceData)91_storage": {
        "encoding": "inplace",
        "label": "struct YourContract.InvoiceData",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 84,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 86,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "buyer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 88,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 90,
            "contract": "contracts/YourContract.sol:YourContract",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}