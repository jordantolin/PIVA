{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\t\npragma solidity >=0.8.0 <0.9.0;\n\n// Utile per il debug. Rimuovere prima del rilascio su una rete live.\n//import \"hardhat/console.sol\";\n// Interfaccia per il token ERC20\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract YourContract {\n    // Definizione della struttura dati per le informazioni relative a una fattura\n    struct InvoiceData {\n        uint256 id; // Identificativo della fattura\n        address seller; // Indirizzo del venditore\n        address buyer; // Indirizzo dell'acquirente\n        uint amount; // Importo della fattura\n        bool paid; // Flag che indica se la fattura è stata pagata\n    }\n\n    // Mappatura degli ID delle fatture alle relative informazioni\n    mapping(uint256 => InvoiceData) public invoices;\n\n    uint256 public id;\n\n    address public usdcToken;\n    \n    // Evento emesso quando viene creata una nuova fattura\n    event InvoiceCreated(address indexed seller, address indexed buyer, uint amount);\n\n\n    constructor() {\n        usdcToken = 0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d;\n    }\n\n\n    // Funzione per creare una nuova fattura\n    function createInvoice(address seller, address buyer, uint amount) public returns (uint256){\n\n        require(seller != address(0));\n        require(buyer != address(0));\n        require(amount != 0);\n\n        id += 1;\n        // Creazione di una nuova fattura\n        InvoiceData memory newInvoice = InvoiceData({\n            id: id, // Identificativo della fattura\n            seller: seller, // Indirizzo del venditore\n            buyer: buyer, // Indirizzo dell'acquirente\n            amount: amount, // Importo della fattura\n            paid: false // Flag che indica se la fattura è stata pagata\n        });\n\n        // Salva la fattura nel mapping\n        invoices[newInvoice.id] = newInvoice;\n\n        // Emisione dell'evento InvoiceCreated\n        emit InvoiceCreated(seller, buyer, amount);\n\n        return newInvoice.id;\n    }\n\n    // Funzione per pagare una fattura\n    function payInvoice(uint256 invoiceId) public {\n        // Recupera la fattura dal mapping\n        InvoiceData storage invoice = invoices[invoiceId];\n\n        // Verifica che la fattura non sia già stata pagata\n        require(!invoice.paid, \"The invoice has already been paid\");\n\n        // Trasferisce l'importo della fattura dal pagatore al venditore\n        IERC20(usdcToken).transferFrom(invoice.buyer, invoice.seller, invoice.amount);\n\n        // Imposta il flag di pagamento della fattura su true\n        invoice.paid = true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}